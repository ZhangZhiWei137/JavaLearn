//////////////////////////////////////////////////////////////
				多线程的基本概念：

多线程：指的是这个程序（一个进程）运行时产生了不止一个线程
并行与并发：
	并行：多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。
	并发：通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。并发往往在场景中有公用的资源，
	          那么针对这个公用的资源往往产生瓶颈，我们会用TPS或者QPS来反应这个系统的处理能力。
	          
线程安全：经常用来描绘一段代码。指在并发的情况之下，该代码经过多线程使用，线程的调度顺序不影响任何结果。这个时候使用多线程，我们只需要关注系统的内存，cpu是不是够用即可。
线程不安全：就意味着线程的调度顺序会影响最终结果

同步：Java中的同步指的是通过人为的控制和调度，保证共享资源的多线程访问成为线程安全，来保证结果的准确。如上面的代码简单加入@synchronized关键字。
          在保证结果准确的同时，提高性能，才是优秀的程序。线程安全的优先级高于性能。
          
////////////////////////////////////////////////////////////////
				Java创建启动线程的多种方式  
1、继承Thread类，重写run()方法
2、实现Runnable接口，重写run()
3、匿名内部类的方式
4、带返回值的线程(实现implements  Callable<返回值类型>)————以上3种方式，都没有返回值且都无法抛出异常。
5、定时器(java.util.Timer)
6、线程池的实现(java.util.concurrent.Executor接口)
7、Lambda表达式的实现
8、Spring实现多线程
